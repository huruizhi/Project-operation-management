pipeline {

    agent {
        label &apos;192.168.0.158&apos;
    }

    options {
        timeout(time: 30, unit: &apos;MINUTES&apos;)
    }

    parameters {
        //构建选项，选择构建环境
        choice(name: &apos;release_env&apos;,
                choices:&apos;dev\npro&apos;,
                description: &apos;choose release environment\ndev port:{{dev_port}}\npro port:{{pro_port}}\nserver:192.168.0.158&apos;)
    }
    tools {
        maven &apos;M3&apos;
        jdk &apos;jdk_1.8.0_161&apos;r
    }
    stages {
        stage(&apos;准备源码&apos;) {
            steps {
                script {
				    project_name=&quot;{{project_name}}&quot;

                    // 需要修改自定义的变量
					svn_addr=&quot;{{svn_address}}&quot;
                    module_name=&quot; {module_name}}&quot;
                    workdir=&quot;/application/docker_hub/java/{{project_name}}&quot;
					r_env=release_env


					docker_image=&quot;{{harbor_url}}/${project_name}/${module_name}&quot;
					deploy_name=&quot;${project_name}-${module_name}-${r_env}&quot;
					name_space=&quot;${project_name}-${r_env}&quot;
					deploy_file=&quot;${deploy_name}-deployment.yaml&quot;
					deploy_path=&quot;/application/k8s-projects/${project_name}/${module_name}/${deploy_file}&quot;


                    docker_file_path=&quot;${workdir}/${module_name}_${r_env}&quot;
                    docker_compose_file=&quot;${workdir}/docker-compose-${r_env}.yml&quot;
                    docker_compose_module_name=&quot;${project_name}_${module_name}_${r_env}&quot;
                    // logs
                    old_date=sh returnStdout: true ,script: &quot;echo \$(date -d &apos;-1 hour&apos; &apos;+%F-%H-%M-%S&apos;)&quot;
                    old_date=old_date.trim()
					date=sh returnStdout: true ,script: &quot;echo \$(date &apos;+%F-%H-%M-%S&apos;)&quot;
                    date=date.trim()
                    logsdir=&quot;/application/docker_hub/logs/pymom&quot;
                    module_logs_path=&quot;${logsdir}/${module_name}_${r_env}&quot;
                    sh &quot;mkdir -p ${module_logs_path}&quot;
                    docker_containers_path=&quot;/var/lib/docker/containers&quot;
                }
                checkout([$class: &apos;SubversionSCM&apos;,
                additionalCredentials: [],
                excludedCommitMessages: &apos;&apos;,
                excludedRegions: &apos;&apos;,
                excludedRevprop: &apos;&apos;,
                excludedUsers: &apos;&apos;,
                filterChangelog: false,
                ignoreDirPropChanges: false,
                includedRegions: &apos;&apos;,
                locations: [[credentialsId: &apos;dffd18a8-473e-477e-a4dc-4d528fa3e55c&apos;,
                            depthOption: &apos;infinity&apos;,
                            ignoreExternalsOption: true,
                            local: &apos;.&apos;,
                            remote: svn_addr ]],
                            quietOperation: true,
                            workspaceUpdater: [$class: &apos;UpdateUpdater&apos;]])
            }
        }
        stage(&apos;MVN打包&apos;) {
            steps {
                sh &apos;mvn -B -DskipTests clean package&apos;
            }
        }
        stage(&apos;MVN测试&apos;) {
            steps {
                sh &apos;mvn test&apos;
            }
        }
		stage(&apos;创建镜像&apos;) {
            steps {
				sh &quot;mkdir -p ${docker_file_path}; rm -rf ${docker_file_path}/app.jar&quot;
                sh &quot;/bin/cp -a ./target/*.jar ${docker_file_path}/app.jar;&quot;
				sh &quot;/bin/cp /script/dockerfiles/Dockerfile-java ${docker_file_path}/Dockerfile&quot;
				sh &quot;cd ${docker_file_path} && docker build -t ${docker_image}:latest .&quot;
            }
        }
		stage(&apos;上传镜像&apos;) {
            steps {
				sh &quot;docker push ${docker_image}:latest  && docker rmi ${docker_image}:latest&quot;
            }
        }
		stage(&apos;停止服务&apos;) {
            steps {
				sh &quot;kubectl delete deploy ${deploy_name} -n ${name_space}&quot;
            }
        }
		stage(&apos;启动服务&apos;) {
            steps {
				sh &quot;kubectl apply -f ${deploy_path}&quot;
            }
        }
    }
}